import Head from "next/head";
import { Footer } from "../components/Footer";
import { NavBar } from "../components/NavBar";
import { createClient } from "contentful";
import PerformerCard from "../components/Card";
import Link from "next/link";
import Blog from "../components/Blog";



const client = createClient({
    accessToken: "0IRHIiCOME2lbCZeyFSGiPrJ5HaA1TrI6V3cflGzzDo",
    space: "t5lykk6ug6w4",
});

export async function getStaticProps() {
    const res = await client.getEntries({ content_type: "header" });
    const res2 = await client.getEntries({ content_type: "featuredCard" });
    const res3 = await client.getEntries({ content_type: "blogPost" });
    return {
        props: {
            image: res.items[0].fields,
            performers: res2.items,
            blogPosts: res3.items,
        },
    };
}

interface Props {
    image: {
        headerLogo: {
            fields: {
                file: {
                    url: string;
                };
            };
        };
        title: string;
    };
    performers: [
        {
            sys: { id: string };
            fields: {
                cardTitle: string;
                thumbnail: { fields: { file: { url: string } } };
                cardText: { content: {}; data: {}; nodeType: string };
            };
        }
    ];
    blogPosts: [
        {
            fields: {
                title: string;
                author: string;
                blogCardPublishDate: string;
                cardText: {};
            };
            sys: { id: string };
        }
    ];
}

export default function Home({ image, performers, blogPosts }: Props) {
    return (
        <div>
            <Head>
                <title>NJPWDB | Home</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <NavBar image={image} />
            <Link href="/performers">Link</Link>
            <main className="flex justify-around">
                <div className="w-3/5">
                    <h1 className="text-center">Performers</h1>
                    <div className="flex flex-wrap">
                        {performers.map(
                            (p: {
                                sys: { id: string };
                                fields: {
                                    cardTitle: string;
                                    thumbnail: {
                                        fields: { file: { url: string } };
                                    };
                                    cardText: {
                                        content: {};
                                        data: {};
                                        nodeType: string;
                                    };
                                };
                            }) => (
                                <PerformerCard
                                    key={p.sys.id}
                                    performer={p.fields}
                                />
                            )
                        )}
                    </div>
                </div>
                <div className="w-2/5">
                    <h1 className="text-center">Blog Posts</h1>
                    <div>
                        {blogPosts.map(
                            (b: {
                                fields: {
                                    title: string;
                                    author: string;
                                    blogCardPublishDate: string;
                                    cardText: {};
                                };
                                sys: { id: string };
                            }) => (
                                <Blog key={b.sys.id} blog={b} />
                            )
                        )}
                    </div>
                </div>
            </main>
            <Footer />
        </div>
    );
}
